ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
temp_df <- subset(all_months, PULocationID == input$location)
temp_df <- group_by(temp_df, DOLocationID)
temp_df <-tally(temp_df)
return(temp_df)
})
output$map <- renderLeaflet({
leaflet(all_months) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2)
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
clearControls() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = ~paste(n)
#weight = 1,
#fillColor = colorQuantile("Blues", temp_df$n)(temp_df$n),
#fillOpacity = 1,
#highlightOptions = highlightOptions(
#  color='#000000',
#  weight = 3,
#  bringToFront = TRUE,
#  sendToBack = TRUE)
)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(RColorBrewer)
#ui <- shinyUI(fluidPage(
#  leafletOutput("map", width = "100%", height = "100%"),
#  selectInput("location", "Starting Area Location",
#      choices=unique(all_months$PULocationID))
#    ))
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
temp_df <- subset(all_months, PULocationID == input$location)
temp_df <- group_by(temp_df, DOLocationID)
temp_df <-tally(temp_df)
return(temp_df)
})
output$map <- renderLeaflet({
leaflet(all_months) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2)
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
clearControls() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = ~paste(filteredData$n)
#weight = 1,
#fillColor = colorQuantile("Blues", temp_df$n)(temp_df$n),
#fillOpacity = 1,
#highlightOptions = highlightOptions(
#  color='#000000',
#  weight = 3,
#  bringToFront = TRUE,
#  sendToBack = TRUE)
)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(RColorBrewer)
#ui <- shinyUI(fluidPage(
#  leafletOutput("map", width = "100%", height = "100%"),
#  selectInput("location", "Starting Area Location",
#      choices=unique(all_months$PULocationID))
#    ))
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
temp_df <- subset(all_months, PULocationID == input$location)
temp_df <- group_by(temp_df, DOLocationID)
temp_df <-tally(temp_df)
return(temp_df)
})
output$map <- renderLeaflet({
leaflet(all_months) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2)
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
clearControls() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = ~n
#weight = 1,
#fillColor = colorQuantile("Blues", temp_df$n)(temp_df$n),
#fillOpacity = 1,
#highlightOptions = highlightOptions(
#  color='#000000',
#  weight = 3,
#  bringToFront = TRUE,
#  sendToBack = TRUE)
)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(RColorBrewer)
#ui <- shinyUI(fluidPage(
#  leafletOutput("map", width = "100%", height = "100%"),
#  selectInput("location", "Starting Area Location",
#      choices=unique(all_months$PULocationID))
#    ))
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
temp_df <- subset(all_months, PULocationID == input$location)
temp_df <- group_by(temp_df, DOLocationID)
temp_df <-tally(temp_df)
return(temp_df)
})
output$map <- renderLeaflet({
leaflet(all_months) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2)
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
clearControls() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = ~paste(temp_df$n)
#weight = 1,
#fillColor = colorQuantile("Blues", temp_df$n)(temp_df$n),
#fillOpacity = 1,
#highlightOptions = highlightOptions(
#  color='#000000',
#  weight = 3,
#  bringToFront = TRUE,
#  sendToBack = TRUE)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PULocationID == zone_ID) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~colorQuantile("Blues", filtered_df$n)(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addLegend("topright",
pal = colorQuantile("Blues", test$n, n = 5),
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PULocationID == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~colorQuantile("Blues", filtered_df$n)(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addLegend("topright",
pal = colorQuantile("Blues", test$n, n = 5),
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PULocationID == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~colorQuantile("Blues", filtered_df$n)(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addLegend("topright",
pal = colorQuantile("Blues", test$n, n = 5),
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
rm(test)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jaewham',
token='715B30D3E0646FAA1C9ED71E7B835F7A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jaewham',
token='715B30D3E0646FAA1C9ED71E7B835F7A',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='jaewham',
token='715B30D3E0646FAA1C9ED71E7B835F7A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jaewham',
token='715B30D3E0646FAA1C9ED71E7B835F7A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jaewham',
token='715B30D3E0646FAA1C9ED71E7B835F7A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jaewham', token='715B30D3E0646FAA1C9ED71E7B835F7A', secret='D2Qooeu3LKDWpYswTeL4djj5iZtbLvy+BNfXq6hd')
# Read taxi zone shapefiles
taxi_zones <- rgadal::readOGR("data/taxi_zones/taxi_zones.shp")
# Read taxi zone shapefiles
taxi_zones <- rgdal::readOGR("data/taxi_zones/taxi_zones.shp")
# Read taxi zone shapefiles
taxi_zones <- readOGR("data/taxi_zones/taxi_zones.shp")
# Read taxi zone shapefiles
taxi_zones <- readOGR("data/taxi_zones/taxi_zones.shp")
knitr::opts_chunk$set(echo = TRUE)
library(rsconnect)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(tibble)
library(lubridate)
library(leaflet)
library(sp)
library(sf)
library(rgdal)
library(shiny)
library(leaflet)
# Load data
all_months <- read_csv('jan_dec.csv')
# Read taxi zone shapefiles
taxi_zones <- readOGR("data/taxi_zones/taxi_zones.shp")
# Transform polygon
proj <- spTransform(taxi_zones, '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
# Creating a separate column for hour of the day
all_months$hour <- hour(all_months$tpep_pickup_datetime)
# Creating a separate column for weekdays
all_months$day <- wday(all_months$tpep_pickup_datetime, label = TRUE, week_start = 1)
# Creating a separate column for months
all_months$month <- month(all_months$tpep_pickup_datetime, label = TRUE)
# Creating a separate column for the date
all_months$date <- date(all_months$tpep_pickup_datetime)
# Replace Inf values with 0
all_months <- all_months %>%
mutate(avg_mph = ifelse(avg_mph == Inf, 0, avg_mph))
# Exclude values where duration is negative
all_months <- all_months %>%
filter (duration > 0)
getwd()
setwd()
setwd(C:\Users\jaeha\Documents\Columbia\Spring 2020\DataVisualization\Group_W)
setwd("C:\Users\jaeha\Documents\Columbia\Spring 2020\DataVisualization\Group_W")
setwd("C:/Users/jaeha/Documents/Columbia/Spring 2020/DataVisualization/Group_W")
getwd()
# Load data
all_months <- read_csv('jan_dec.csv')
webshot::install_phantomjs()
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PULocationID))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PULocationID == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~colorQuantile("Blues", filtered_df$n)(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addLegend("topright",
pal = colorQuantile("Blues", filtered_df$n),
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
#total missingness in data
sum(is.na(oct_data))
#missingness by column
colMeans(is.na(oct_data))*100
unique(july_data$RatecodeID)
unique(july_data$passenger_count)
as.data.frame(table(july_data$fare_amount < 2.5)) %>%
rename(
Invalid_Fares = Var1
)
rm(jan_data,february_data,mar_data,apr_data,may_data,jun_data,aug_data,sep_data,nov_data,dec_data)
rm(jan_data,feb_data,mar_data,apr_data,may_data,jun_data,aug_data,sep_data,nov_data,dec_data)
runApp('~/traffic_volume')
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(rsconnect)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(tibble)
library(lubridate)
library(leaflet)
library(sp)
library(sf)
library(rgdal)
# Load data
all_months <- read_csv('jan_dec.csv')
# Read taxi zone shapefiles
taxi_zones <- readOGR("taxi_zones/taxi_zones.shp")
# Transform polygon
proj <- spTransform(taxi_zones, '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
# Creating a separate column for hour of the day
all_months$hour <- hour(all_months$tpep_pickup_datetime)
# Creating a separate column for weekdays
all_months$day <- wday(all_months$tpep_pickup_datetime, label = TRUE, week_start = 1)
# Creating a separate column for months
all_months$month <- month(all_months$tpep_pickup_datetime, label = TRUE)
# Creating a separate column for the date
all_months$date <- date(all_months$tpep_pickup_datetime)
# Replace Inf values with 0
all_months <- all_months %>%
mutate(avg_mph = ifelse(avg_mph == Inf, 0, avg_mph))
#add column containing names
zone_df <- as.data.frame(taxi_zones) %>%
select("LocationID", "zone")
all_months$PUzone <- zone_df$zone[match(all_months$PULocationID, zone_df$LocationID)]
# Exclude values where duration is negative
all_months <- all_months %>%
filter (duration > 0)
plot3 <- ggplot(data=all_months, aes(x=as.numeric(adj_total)))+
geom_histogram(fill='springgreen3', binwidth=1.5) +
xlab("Adjusted Fare Total (Dollars)") +
ylab("Count") +
scale_x_continuous(limits=c(0, 100)) +
theme_bw()
plot3 <- ggplot(data=all_months, aes(x=as.numeric(adj_total)))+
geom_histogram(fill='springgreen3', binwidth=1.5) +
xlab("Adjusted Fare Total (Dollars)") +
ylab("Count") +
scale_x_continuous(limits=c(0, 100)) +
theme_bw()
plot3
library(ggplot2)
plot1 <- ggplot(data=all_months, aes(x=as.numeric(duration)))+
geom_histogram(fill='springgreen3', binwidth = 0.5) +
xlab("Trip Duration (Minutes)") +
ylab("Count") +
scale_x_continuous(limits=c(0, 150)) +
theme_bw()
plot1
