ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PUzone))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PUzone == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#filter second projection
proj2 <- subset(proj, proj$LocationID %in% input$location)
#create pal
pal <- colorNumeric(
palette = "Blues",
domain = filtered_df$n)
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = proj2,
weight = 1,
color = "Red",
fill = "Red") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~pal(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addLegend("topright",
pal = pal,
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PUzone))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PUzone == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#filter second projection
proj2 <- subset(proj, proj$LocationID %in% input$location)
#create pal
pal <- colorNumeric(
palette = "Blues",
domain = filtered_df$n)
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~pal(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addPolygons(data = proj2,
weight = 1,
color = "Red",
fill = "Red") %>%
addLegend("topright",
pal = pal,
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PUzone))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PUzone == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#filter second projection
proj2 <- subset(proj, proj$LocationID %in% input$location)
#create pal
pal <- colorNumeric(
palette = "Blues",
domain = filtered_df$n)
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~pal(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addPolygons(data = proj2,
weight = 1,
color = "Red",
fill = "Red") %>%
addLegend("topright",
pal = pal,
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PUzone))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PUzone == input$location) %>%
group_by(DOLocationID) %>%
tally()
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#filter second projection
proj2 <- subset(proj, proj$zone %in% input$location)
#create pal
pal <- colorNumeric(
palette = "Blues",
domain = filtered_df$n)
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~pal(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addPolygons(data = proj2,
weight = 1,
color = "Red",
fill = "Red") %>%
addLegend("topright",
pal = pal,
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PUzone))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PUzone == input$location) %>%
group_by(DOLocationID) %>%
tally()
if(nrow(filtered_df) < 5){stop("Not enough unique dropoff locations from this origin point. Please select another starting point.")}
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#filter second projection
proj2 <- subset(proj, proj$zone %in% input$location)
#create pal
pal <- colorNumeric(
palette = "Blues",
domain = filtered_df$n)
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~pal(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addPolygons(data = proj2,
weight = 1,
color = "Red",
fill = "Red") %>%
addLegend("topright",
pal = pal,
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Traffic Volumn Analysis"),
mainPanel(
leafletOutput("map"),
br(), br()),
sidebarPanel(
### User chooses the species to map
selectInput("location", "Starting Area Location",
unique(all_months$PUzone))
))
server <- function(input, output, session) {
output$map <- renderLeaflet({
filtered_df <-
all_months %>%
filter(PUzone == input$location) %>%
group_by(DOLocationID) %>%
tally()
if(nrow(filtered_df) < 5){stop("Not enough unique dropoff locations from this origin point. Please select another starting point.")}
#create popup contents
content_do <- paste("Neighborhood:", taxi_zones$zone, "<br/>",
"Number of Dropoffs:", filtered_df$n, "<br/>")
#filter second projection
proj2 <- subset(proj, proj$zone %in% input$location)
#create pal
pal <- colorNumeric(
palette = "Blues",
domain = filtered_df$n)
#create map
leaflet(filtered_df) %>%
addTiles() %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10.2) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = proj,
popup = content_do,
weight = 1,
fillColor = ~pal(filtered_df$n),
fillOpacity = 1,
highlightOptions = highlightOptions(
color='#000000',
weight = 3,
bringToFront = TRUE,
sendToBack = TRUE),
label = taxi_zones$zone) %>%
addPolygons(data = proj2,
weight = 1,
color = "Red",
fill = "Red") %>%
addLegend("topright",
pal = pal,
values = filtered_df$n,
title = "Drop Off Volume",
opacity = 1)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(rsconnect)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(tibble)
library(lubridate)
library(leaflet)
library(sp)
library(sf)
library(rgdal)
# Load data
all_months <- read_csv('jan_dec.csv')
# Read taxi zone shapefiles
taxi_zones <- readOGR("taxi_zones/taxi_zones.shp")
# Transform polygon
proj <- spTransform(taxi_zones, '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
# Creating a separate column for hour of the day
all_months$hour <- hour(all_months$tpep_pickup_datetime)
# Creating a separate column for weekdays
all_months$day <- wday(all_months$tpep_pickup_datetime, label = TRUE, week_start = 1)
# Creating a separate column for months
all_months$month <- month(all_months$tpep_pickup_datetime, label = TRUE)
# Creating a separate column for the date
all_months$date <- date(all_months$tpep_pickup_datetime)
# Replace Inf values with 0
all_months <- all_months %>%
mutate(avg_mph = ifelse(avg_mph == Inf, 0, avg_mph))
#add column containing names
zone_df <- as.data.frame(taxi_zones) %>%
select("LocationID", "zone")
all_months$PUzone <- zone_df$zone[match(all_months$PULocationID, zone_df$LocationID)]
# Exclude values where duration is negative
all_months <- all_months %>%
filter (duration > 0)
# this code is sourced from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/, as the multiplot function is no longer offered as a built in function with the newest version of R
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# this code is sourced from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/, as the multiplot function is no longer offered as a built in function with the newest version of R
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(rsconnect)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(tibble)
library(lubridate)
library(leaflet)
library(sp)
library(sf)
library(rgdal)
# Load data
all_months <- read_csv('jan_dec.csv')
# Read taxi zone shapefiles
taxi_zones <- readOGR("taxi_zones/taxi_zones.shp")
# Transform polygon
proj <- spTransform(taxi_zones, '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
# Creating a separate column for hour of the day
all_months$hour <- hour(all_months$tpep_pickup_datetime)
# Creating a separate column for weekdays
all_months$day <- wday(all_months$tpep_pickup_datetime, label = TRUE, week_start = 1)
# Creating a separate column for months
all_months$month <- month(all_months$tpep_pickup_datetime, label = TRUE)
# Creating a separate column for the date
all_months$date <- date(all_months$tpep_pickup_datetime)
# Replace Inf values with 0
all_months <- all_months %>%
mutate(avg_mph = ifelse(avg_mph == Inf, 0, avg_mph))
#add column containing names
zone_df <- as.data.frame(taxi_zones) %>%
select("LocationID", "zone")
all_months$PUzone <- zone_df$zone[match(all_months$PULocationID, zone_df$LocationID)]
# Exclude values where duration is negative
all_months <- all_months %>%
filter (duration > 0)
# this code is sourced from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/, as the multiplot function is no longer offered as a built in function with the newest version of R
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plot4 <- ggplot(all_months, aes(x=trip_distance, y=as.numeric(duration))) +
geom_point(colour="royalblue3") +
labs(title="Distance vs Duration", x="Distance (Miles)", y="Duration (Minutes)") +
theme_bw() +
scale_x_continuous(limits=c(0, 30)) +
scale_y_continuous(limits=c(0, 150))
plot5 <- ggplot(all_months, aes(x=trip_distance, y=adj_total)) +
geom_point(colour="royalblue3") +
labs(title="Distance vs Fare Total", x="Distance (Miles)", y="Fare Total (Dollars)") +
theme_bw() +
scale_x_continuous(limits=c(0, 30)) +
scale_y_continuous(limits=c(0, 100))
plot6 <- ggplot(all_months, aes(x=trip_distance, y=adj_total)) +
geom_point(colour="royalblue3") +
labs(title="Duration vs Fare Total", x="Duration (Minutes)", y="Fare Total (Dollars)") +
theme_bw() +
scale_x_continuous(limits=c(0, 50)) +
scale_y_continuous(limits=c(0, 100))
multiplot(plot5,plot6,plot4,cols=1)
